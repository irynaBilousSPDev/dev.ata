{"version":3,"file":"ajaxFilter.js","mappings":"yrCAAC,SAAUA,GACP,IAuDUC,EACAC,EAxDJC,EAAUC,mBAAmBC,SAI7BC,EAAkB,CACpB,GAAI,kBACJ,GAAI,iBALOC,OAAOC,UAMT,eAEPC,EAAOT,EAAE,qBACTU,EAAgBV,EAAE,kBAClBW,EAAcX,EAAE,mBAChBY,EAAgBZ,EAAE,mBAYxB,SAASa,IAAuB,IAAXX,EAAIY,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzBd,EAAEiB,KAAK,CACHC,IAAKf,EACLgB,OAAQ,OACRjB,KAAIkB,EAAA,CAAIC,OAAQf,GAAoBJ,GACpCoB,QAAO,SAACC,GACJX,EAAcY,KAAKD,EACvB,GAER,CAGA,SAASE,EAAOC,EAAOC,GACnB3B,EAAE,UACG4B,SAAS,cACTC,KAAK,aAAcF,GACnBG,KAAK,GAADC,OAAIL,EAAK,OACbM,SAAStB,GACdC,EAAYsB,MAChB,CAGA,SAASC,EAAUP,GACfjB,EAAcyB,KAAK,gBAADJ,OAAiBJ,EAAQ,OAAMS,SACT,IAApC1B,EAAc2B,WAAWtB,QACzBJ,EAAY2B,MAEpB,CArCAtC,EAAEiB,KAAK,CACHC,IAAKf,EACLgB,OAAQ,OACRjB,KAAM,CAAEmB,OAAQf,GAChBgB,QAAO,SAACC,GACJX,EAAcY,KAAKD,EACvB,IA0DJd,EAAK8B,GAAG,SAAU,0BAA0B,WACxC,IAAMC,EAAWxC,EAAEyC,MACbf,EAAQc,EAASE,QAAQ,SAASZ,OAAOa,OACzChB,EAAWa,EAASI,MAEtBJ,EAASK,GAAG,YACZpB,EAAOC,EAAOC,GAEdO,EAAUP,GAMdd,EAAY,CAAEiC,UADDrC,EAAKsC,cAIlB,IAAMC,EAAS,IAAIC,gBACnBxC,EAAK0B,KAAK,kCAAkCe,MAAK,WAC7C,IAAMC,EAAOnD,EAAEyC,MAAMZ,KAAK,QAAQuB,QAAQ,KAAM,IAC1CC,EAAQrD,EAAEyC,MAAMG,MACtBI,EAAOM,OAAOH,EAAME,EACxB,IAEAE,OAAOC,QAAQC,UAAU,CAAC,EAAG,GAAIF,OAAOG,SAASC,SAIrD,IAGAjD,EAAc6B,GAAG,QAAS,eAAe,WACrC,IACMZ,EADM3B,EAAEyC,MACOvC,KAAK,SAG1BO,EAAK0B,KAAK,gBAADJ,OAAiBJ,EAAQ,OAAMiC,KAAK,WAAW,GACxD1B,EAAUP,GAIVd,EAAY,CAAEiC,UADDrC,EAAKsC,aAEtB,IAGA/C,EAAE,kBAAkBuC,GAAG,SAAS,WAE5B9B,EAAK0B,KAAK,0BAA0ByB,KAAK,WAAW,GAEpDlD,EAAcmD,QACdlD,EAAY2B,OACZzB,IAEA0C,OAAOC,QAAQC,UAAU,CAAC,EAAG,GAAIF,OAAOG,SAASC,SACrD,IA7EU1D,EAAY,IAAIgD,gBAAgBM,OAAOG,SAASI,QAChD5D,EAAO,CAAC,EAGdD,EAAU8D,SAAQ,SAACV,EAAOW,GACtB,IAAMxB,EAAW/B,EAAK0B,KAAK,eAADJ,OAAgBiC,EAAG,gBAAAjC,OAAesB,EAAK,OAC7Db,EAASzB,SACTyB,EAASoB,KAAK,WAAW,GAEzBnC,EADce,EAASE,QAAQ,SAASZ,OAAOa,OACjCU,GACdnD,EAAK8D,GAAO9D,EAAK8D,IAAQ,GACzB9D,EAAK8D,GAAKC,KAAKZ,GAEvB,IAGIa,OAAOC,KAAKjE,GAAMa,OAAS,GAC3BF,EAAY,CAAEiC,UAAWrC,EAAKsC,aAgEzC,CAzIA,CAyICqB,O","sources":["webpack://akademiata theme/./assets/src/js/ajax-filter.js"],"sourcesContent":["(function ($) {\r\n    const ajaxUrl = ajax_filter_params.ajax_url;\r\n    const pageId = wpData.page_id;\r\n    // console.log('Ajax URL:', ajax_filter_params.ajax_url);\r\n    // console.log('Current Page ID:', pageId);\r\n    const filter_bachelor = {\r\n        13: 'filter_bachelor',\r\n        15: 'filter_master'\r\n    }[pageId] || 'filter_posts';\r\n\r\n    const form = $('#ajax-filter-form');\r\n    const tagsContainer = $('#selected-tags');\r\n    const tagsWrapper = $('#tags-container');\r\n    const filterResults = $('#filter-results');\r\n    // Initialize: Load all posts on page load\r\n    $.ajax({\r\n        url: ajaxUrl,\r\n        method: 'POST',\r\n        data: { action: filter_bachelor },\r\n        success(response) {\r\n            filterResults.html(response);\r\n        },\r\n    });\r\n\r\n    // Function: Reload posts via AJAX\r\n    function reloadPosts(data = {}) {\r\n        $.ajax({\r\n            url: ajaxUrl,\r\n            method: 'POST',\r\n            data: { action: filter_bachelor, ...data },\r\n            success(response) {\r\n                filterResults.html(response);\r\n            },\r\n        });\r\n    }\r\n\r\n    // Function: Add a tag to the tags container\r\n    function addTag(label, tagValue) {\r\n        $('<span>')\r\n            .addClass('filter-tag')\r\n            .attr('data-value', tagValue)\r\n            .text(`${label} âœ•`)\r\n            .appendTo(tagsContainer);\r\n        tagsWrapper.show(); // Show the tags container\r\n    }\r\n\r\n    // Function: Remove a tag by its value\r\n    function removeTag(tagValue) {\r\n        tagsContainer.find(`[data-value=\"${tagValue}\"]`).remove();\r\n        if (tagsContainer.children().length === 0) {\r\n            tagsWrapper.hide(); // Hide the tags container if empty\r\n        }\r\n    }\r\n\r\n    // Function: Initialize filters from the URL query\r\n    function initializeFiltersFromURL() {\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const data = {};\r\n\r\n        // Pre-check filters and add corresponding tags\r\n        urlParams.forEach((value, key) => {\r\n            const checkbox = form.find(`input[name=\"${key}[]\"][value=\"${value}\"]`);\r\n            if (checkbox.length) {\r\n                checkbox.prop('checked', true); // Check the checkbox\r\n                const label = checkbox.closest('label').text().trim();\r\n                addTag(label, value); // Add the tag\r\n                data[key] = data[key] || [];\r\n                data[key].push(value);\r\n            }\r\n        });\r\n\r\n        // Reload posts based on the query parameters\r\n        if (Object.keys(data).length > 0) {\r\n            reloadPosts({ form_data: form.serialize() });\r\n        }\r\n    }\r\n\r\n\r\n    // Handle checkbox state changes\r\n    form.on('change', 'input[type=\"checkbox\"]', function () {\r\n        const checkbox = $(this);\r\n        const label = checkbox.closest('label').text().trim();\r\n        const tagValue = checkbox.val();\r\n\r\n        if (checkbox.is(':checked')) {\r\n            addTag(label, tagValue); // Add tag when checkbox is checked\r\n        } else {\r\n            removeTag(tagValue); // Remove tag when checkbox is unchecked\r\n        }\r\n\r\n\r\n        // Serialize form data and reload posts\r\n        const data = form.serialize();\r\n        reloadPosts({ form_data: data });\r\n\r\n        // Update browser URL with the current filters\r\n        const params = new URLSearchParams();\r\n        form.find('input[type=\"checkbox\"]:checked').each(function () {\r\n            const name = $(this).attr('name').replace('[]', ''); // Remove array brackets\r\n            const value = $(this).val();\r\n            params.append(name, value);\r\n        });\r\n\r\n        window.history.pushState({}, '', window.location.pathname);\r\n\r\n        // window.history.pushState({}, '', '?' + params.toString());\r\n        // /oferta/?degree=studia-1-stopnia&degree=studia-2-stopnia\r\n    });\r\n\r\n    // Handle tag removal\r\n    tagsContainer.on('click', '.filter-tag', function () {\r\n        const tag = $(this);\r\n        const tagValue = tag.data('value');\r\n\r\n        // Uncheck associated checkbox and remove the tag\r\n        form.find(`input[value=\"${tagValue}\"]`).prop('checked', false);\r\n        removeTag(tagValue);\r\n\r\n        // Serialize form data and reload posts\r\n        const data = form.serialize();\r\n        reloadPosts({ form_data: data });\r\n    });\r\n\r\n    // Handle clear filters button\r\n    $('#clear-filters').on('click', () => {\r\n        // Uncheck all checkboxes, clear tags, and reload all posts\r\n        form.find('input[type=\"checkbox\"]').prop('checked', false);\r\n\r\n        tagsContainer.empty();\r\n        tagsWrapper.hide();\r\n        reloadPosts();\r\n\r\n        window.history.pushState({}, '', window.location.pathname);\r\n    });\r\n\r\n    // Initialize filters on page load\r\n    initializeFiltersFromURL();\r\n}(jQuery));\r\n\r\n\r\n\r\n"],"names":["$","urlParams","data","ajaxUrl","ajax_filter_params","ajax_url","filter_bachelor","wpData","page_id","form","tagsContainer","tagsWrapper","filterResults","reloadPosts","arguments","length","undefined","ajax","url","method","_objectSpread","action","success","response","html","addTag","label","tagValue","addClass","attr","text","concat","appendTo","show","removeTag","find","remove","children","hide","on","checkbox","this","closest","trim","val","is","form_data","serialize","params","URLSearchParams","each","name","replace","value","append","window","history","pushState","location","pathname","prop","empty","search","forEach","key","push","Object","keys","jQuery"],"sourceRoot":""}